[{"title":"git 常用指令","url":"/2025/01/14/git-%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>Git官方参考文档为：<a href=\"https://git-scm.com/docs\">https://git-scm.com/docs</a>。里面列出了Git所有命令及其详尽说明。实际上，大家也不需要去访问网站，Git软件本身就自带说明文档，大家直接查看本地说明文档即可。比如 diff 这个命令，我们输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git diff --<span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n<p>Git 命令操作区域关系:<br><img src=\"/images/git_firmware.png\" alt=\"image\" title=\"Git 命令操作区域关系\"></p>\n<span id=\"more\"></span>\n<h1 id=\"初次运行-Git-前的配置\"><a href=\"#初次运行-Git-前的配置\" class=\"headerlink\" title=\"初次运行 Git 前的配置\"></a>初次运行 Git 前的配置</h1><p>安装完 Git 之后，必做的第一件事就是设置你的用户名和邮件地址。 这一点很重要，因为每一个 Git 提交都会使用这些信息，它们会写入到你的每一次提交中，不可更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">&quot;John Doe&quot;</span></span><br><span class=\"line\">git config --global user.email johndoe@example.com</span><br></pre></td></tr></table></figure>\n<h1 id=\"git-常用指令\"><a href=\"#git-常用指令\" class=\"headerlink\" title=\"git 常用指令\"></a>git 常用指令</h1><h2 id=\"git-config\"><a href=\"#git-config\" class=\"headerlink\" title=\"git config\"></a>git config</h2><p>用于配置git软件的一些参数。</p>\n<ol>\n<li>设置邮箱和用户名（记得换成你自己的邮箱和用户名）</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">&quot;John Doe&quot;</span></span><br><span class=\"line\">git config --global user.email johndoe@example.com</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>默认分支名字改为 main</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global init.defaultBranch main</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>设置 http 代理或者 vpn</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config https.proxy 127.0.0.1:7890</span><br><span class=\"line\">git config http.proxy 127.0.0.1:7890</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>取消 http 代理或者 vpn 设置</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --<span class=\"built_in\">unset</span> http.proxy</span><br><span class=\"line\">git config --<span class=\"built_in\">unset</span> https.proxy</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>把 c:&#x2F;mywork（记得换成你自己的目录哦）设为安全目录</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --add safe.directory c:/mywork</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>所有目录都是安全的</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --add safe.directory <span class=\"string\">&quot;*&quot;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"git-init\"><a href=\"#git-init\" class=\"headerlink\" title=\"git init\"></a>git init</h2><p>用来创建仓库。</p>\n<ol>\n<li>在当前目录创建git仓库</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在新目录 work&#x2F;repo（记得换成你自己的目录哦）下创建git仓库</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git init work/repo</span><br></pre></td></tr></table></figure>\n<h2 id=\"git-clone\"><a href=\"#git-clone\" class=\"headerlink\" title=\"git clone\"></a>git clone</h2><p>用于将远程仓库克隆到本地</p>\n<ol>\n<li>克隆仓库到本地（记得换成你自己的git服务器地址）</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/username/project.git</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>递归克隆远程仓库，这个远程仓库包含 submodule（记得换成你自己的git服务器地址）</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/username/project.git --recursive</span><br></pre></td></tr></table></figure>\n<h2 id=\"git-add\"><a href=\"#git-add\" class=\"headerlink\" title=\"git add\"></a>git add</h2><p>用于把工作目录更新添加到 index 区（stage区）</p>\n<ol>\n<li>把工作目录所有修改添加到 index</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git add .</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>把指定文件 main.c 添加到 index</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git add main.c</span><br></pre></td></tr></table></figure>\n<h2 id=\"git-commit\"><a href=\"#git-commit\" class=\"headerlink\" title=\"git commit\"></a>git commit</h2><p>用于把修改提交到仓库</p>\n<ol>\n<li>把 stage 内容提交到仓库，自动打开系统编辑器以让你输入提交信息</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git commit</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>把 stage 内容提交到仓库，自动打开系统编辑器以让你输入提交信息，并署名该提交</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git commit -s</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>把 stage 内容提交到仓库，提交信息为”my first repo”</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">&quot;my first repo&quot;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>把 working directory 里面的修改直接提交到仓库，自动打开系统编辑器以让你输入提交信息</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git commit -a</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>把 working directory 里面的修改直接提交到仓库，提交信息为 “updated main.c”</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git commit -a -m <span class=\"string\">&quot;updated main.c&quot;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>commit 之后发现还有文件需要修改，修改之后，把本次修改合并在上次 commit 之中，而不是另起一个新 commit，自动打开系统编辑器以让你更新上次的提交信息</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git commit --amend</span><br></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>commit 之后发现还有文件需要修改，修改之后，把本次修改合并在上次 commit 之中，而不是另起一个新 commit，并把提交信息更新为 “updated main.c again”</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git commit --amend -m <span class=\"string\">&quot;updated main.c again&quot;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"git-diff\"><a href=\"#git-diff\" class=\"headerlink\" title=\"git diff\"></a>git diff</h2><p>用来比较两个对象</p>\n<ol>\n<li>显示所有未添加至 index 的变更</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git diff</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>显示所有已添加到 index 但还未 commit 的变更</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git diff --cached</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>显示 main 分支与 blinky 分支的不同</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git diff main blinky</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>只显示 main 分支与 blinky 分支 src 目录的不同</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git diff main blinky -- src/*</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>只统计 main 分支与 blinky 分支的文件差异，不比较内容本身差异</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git diff main blinky --<span class=\"built_in\">stat</span></span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>比较 HEAD 与 d1ba4913a43004bb880707276287b8a9c08b32fc（这是一个对象的 ID，即 hash 值）的差异</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git diff d1ba4913</span><br></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>将更改输出到 patch.diff 文件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git diff &gt; patch.diff</span><br></pre></td></tr></table></figure>\n<h2 id=\"git-reset\"><a href=\"#git-reset\" class=\"headerlink\" title=\"git reset\"></a>git reset</h2><p>用来把 HEAD 指针复位到前面的 commit</p>\n<ol>\n<li>把 HEAD 复位到 commit：fb863c（这是一个对象的 ID，即 hash 值）状态</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git reset --hard fb863c</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>把 main 分支复位到服务器 clone 状态</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git reset --hard origin/main</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>复位 index 区</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git reset</span><br></pre></td></tr></table></figure>\n<h2 id=\"git-status\"><a href=\"#git-status\" class=\"headerlink\" title=\"git status\"></a>git status</h2><p>用于查看当前状态</p>\n<ol>\n<li>查看 working directory 哪些文件修改了</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure>\n<h2 id=\"git-rm\"><a href=\"#git-rm\" class=\"headerlink\" title=\"git rm\"></a>git rm</h2><p>用于删除工作目录或者 index 区的文件</p>\n<ol>\n<li>同时删除 index 和 working tree 里面的 README.rst 文件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">rm</span> README.rst</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>只删除 index 里面的 README.rst，保留 working tree 里面的 README.rst</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">rm</span> --cached README.rst</span><br></pre></td></tr></table></figure>\n<p>如果只删除 working tree 里面的文件，或者还没有添加到 index 里面的文件，请直接使用操作系统的删除命令</p>\n<h2 id=\"git-log\"><a href=\"#git-log\" class=\"headerlink\" title=\"git log\"></a>git log</h2><p>显示提交历史</p>\n<ol>\n<li>显示提交历史</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>简化显示提交历史</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> --oneline</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>显示提交历史，并统计文件修改情况</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> --<span class=\"built_in\">stat</span></span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>搜索所有提交历史信息中包含 “blinky” 关键字的提交</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> --grep blinky</span><br></pre></td></tr></table></figure>\n<h2 id=\"git-show\"><a href=\"#git-show\" class=\"headerlink\" title=\"git show\"></a>git show</h2><p>用于显示对象信息</p>\n<ol>\n<li>显示 e56e8a（这是一个对象的 ID，即 hash 值）的信息</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git show e56e8a</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>显示 tag v1.0.0 的信息</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git show v1.0.0</span><br></pre></td></tr></table></figure>\n<h2 id=\"git-tag\"><a href=\"#git-tag\" class=\"headerlink\" title=\"git tag\"></a>git tag</h2><p>用于创建，列出，删除与验证tag对象</p>\n<ol>\n<li>列出目前仓库包含的tag</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git tag</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>给 commit e56e8a（这是一个对象的 ID，即 hash 值）打轻量级的 tag，tag 名称为 v0.1</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git tag v0.1 e56e8a</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>给 HEAD 打有注解的 tag，tag 名称为 v1.0.0</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git tag -a v1.0.0 -m <span class=\"string\">&quot;git demo release v1.0.0&quot;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>删掉 tag v0.1</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git tag -d v0.1</span><br></pre></td></tr></table></figure>\n<h2 id=\"git-branch\"><a href=\"#git-branch\" class=\"headerlink\" title=\"git branch\"></a>git branch</h2><p>git branch用于列出，创建和删除分支。</p>\n<ol>\n<li>列出所有本地分支</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git branch</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>列出所有远程分支（确切说是远程跟踪分支）</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git branch -r</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>同时列出本地和远程分支</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>创建一个新分支：feature</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git branch feature</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>删除分支：feature</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git branch -d feature</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>修改分支 feature 名字为 dev</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git branch -m feature dev</span><br></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>基于 commit e56e8a（这是一个对象的 ID，即 hash 值）建立分支：feature</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git branch feature e56e8a</span><br></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>设置当前分支跟踪 origin&#x2F;blinky，即 origin&#x2F;blinky 成为它的 upstream</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git branch --set-upstream-to origin/blinky</span><br></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>删除远程分支 blinky 在本地的 clone</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git branch -dr origin/blinky</span><br></pre></td></tr></table></figure>\n<h2 id=\"git-checkout\"><a href=\"#git-checkout\" class=\"headerlink\" title=\"git checkout\"></a>git checkout</h2><p>用于切换分支或者恢复工作目录内容</p>\n<ol>\n<li>切换到 blinky 分支</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git checkout blinky</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>切换到 tag：v1.0.0</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git checkout v1.0.0</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>创建分支 blinky 并切换到此分支</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git checkout -b blinky</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>把 index 区的 src&#x2F;main.c 覆盖 working tree 里面的 src&#x2F;main.c</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git checkout -- src/main.c</span><br></pre></td></tr></table></figure>\n<h2 id=\"git-merge\"><a href=\"#git-merge\" class=\"headerlink\" title=\"git merge\"></a>git merge</h2><p>用于合并开发历史</p>\n<ol>\n<li>将远程跟踪分支 origin&#x2F;main 合并到当前分支</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git merge origin/main</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>手动解决冲突后，继续刚才有冲突的 merge，完成 merge 过程</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git merge --<span class=\"built_in\">continue</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>中止刚才有冲突的 merge</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git merge --abort</span><br></pre></td></tr></table></figure>\n<h2 id=\"git-rebase\"><a href=\"#git-rebase\" class=\"headerlink\" title=\"git rebase\"></a>git rebase</h2><p>用于将当前分支分叉后的所有 commit 重新提交在新分支的末端</p>\n<ol>\n<li>将当前分支分叉后的所有 commit 重新提交在 main 分支的末端</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git rebase main</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>手动解决冲突后继续 rebase 操作以完成整个操作</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git rebase --<span class=\"built_in\">continue</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>跳过本 commit 继续 rebase 过程</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git rebase --skip</span><br></pre></td></tr></table></figure>\n<h2 id=\"git-remote\"><a href=\"#git-remote\" class=\"headerlink\" title=\"git remote\"></a>git remote</h2><p>用于管理远程跟踪仓库</p>\n<ol>\n<li>查看当前所有远程跟踪仓库</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>显示远程仓库 origin 的信息</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git remote show origin</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>将 <a href=\"https://github.com/username/project.git\">https://github.com/username/project.git</a> 设为远程跟踪仓库，并命名为 origin 或 mirror</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git remote add origin https://github.com/username/project.git</span><br><span class=\"line\">git remote add mirror https://github.com/username/project.git</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>删除远程跟踪仓库 origin</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git remote remove origin</span><br></pre></td></tr></table></figure>\n<h2 id=\"git-push\"><a href=\"#git-push\" class=\"headerlink\" title=\"git push\"></a>git push</h2><p>将本地内容推送到远程服务器</p>\n<ol>\n<li>将当前分支推送到远程 origin 仓库的 main 分支</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git push -u origin main</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>推送所有跟踪分支到远程服务器</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>删除远程服务器的 blinky 分支</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git push origin --delete blinky</span><br></pre></td></tr></table></figure>\n<h2 id=\"git-fetch\"><a href=\"#git-fetch\" class=\"headerlink\" title=\"git fetch\"></a>git fetch</h2><p>用于下载远程仓库更新到本地</p>\n<ol>\n<li>下载所有关联的远程仓库</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git fetch</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>下载origin仓库的更新到本地 clone 区</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git fetch origin</span><br></pre></td></tr></table></figure>\n<h2 id=\"git-pull\"><a href=\"#git-pull\" class=\"headerlink\" title=\"git pull\"></a>git pull</h2><p>用于集成远程分支更新到本地分支，是 git fetch 和 git rebase&#x2F;merge 的合体</p>\n<ol>\n<li>将当前分支 rebase 到远程跟踪分支 origin&#x2F;main</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git pull --rebase origin main</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>将远程 origin&#x2F;main 分支 merge 到当前分支</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git pull origin main</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>取所有远程分支，并将当前分支的upstream分支merge过来</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git pull</span><br></pre></td></tr></table></figure>\n<h2 id=\"git-revert\"><a href=\"#git-revert\" class=\"headerlink\" title=\"git revert\"></a>git revert</h2><p>用于覆盖最近几次的提交，即把历史中的一次提交重新在分支顶端提交一次</p>\n<ol>\n<li>把前一次提交再重新提交一次，相当于前一次提交覆盖了当前提交</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git revert HEAD~1</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>把 commit：fb863c（这是一个对象的ID，即hash值）重新提交在分支最顶端</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git revert fb863c</span><br></pre></td></tr></table></figure>\n<h2 id=\"git-restore\"><a href=\"#git-restore\" class=\"headerlink\" title=\"git restore\"></a>git restore</h2><p>用于恢复工作目录或者 index 区里面的文件</p>\n<ol>\n<li>将 index 中的 src&#x2F;main.c 内容恢复到工作区的 src&#x2F;main.c</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git restore src/main.c</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>恢复 index 中的 README.rst 至 HEAD 状态</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git restore --staged README.rst</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>将tag：v1.0.0 中的 src&#x2F;main.c 内容恢复到工作区的 src&#x2F;main.c</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git restore --<span class=\"built_in\">source</span>=v1.0.0 src/main.c</span><br></pre></td></tr></table></figure>\n<h2 id=\"git-reflog\"><a href=\"#git-reflog\" class=\"headerlink\" title=\"git reflog\"></a>git reflog</h2><p>用于管理引用日志信息，包括多个子命令，默认 git reflog 等价于 git reflog show。</p>\n<ol>\n<li>显示 HEAD 的所有更新操作日志，包括那些删除了或者不可达的 commit</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git reflog</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>显示 main 分支的所有更新操作日志，包括那些删除了或者不可达的 commit</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git reflog main</span><br></pre></td></tr></table></figure>\n<h2 id=\"git-stash\"><a href=\"#git-stash\" class=\"headerlink\" title=\"git stash\"></a>git stash</h2><p>用于将 working tree 的修改暂时压栈</p>\n<ol>\n<li>将 working tree 里面的修改压入 stash 栈</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git stash</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>将 stash 栈中的内容弹出到工作区</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git stash pop</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>显示stash栈里面的内容</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git stash show</span><br></pre></td></tr></table></figure>\n<h2 id=\"git-submodule\"><a href=\"#git-submodule\" class=\"headerlink\" title=\"git submodule\"></a>git submodule</h2><p>用于初始化，更新和查看 submodule</p>\n<ol>\n<li>把 <a href=\"https://github.com/username/ncs_samples.git\">https://github.com/username/ncs_samples.git</a> 添加为本仓库的子模块并放在 ncs 目录下</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git submodule add https://github.com/username/ncs_samples.git ncs</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>从服务器下载 submodule 的更新，如果没有初始化，则对其先进行初始化</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git submodule update --init</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>反初始化 ncs 这个 submodule</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git submodule deinit ncs</span><br></pre></td></tr></table></figure>\n","tags":["git"]},{"title":"国内镜像源","url":"/2025/01/14/%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E6%BA%90/","content":"<p>npm 官方原始镜像网址是：<a href=\"https://registry.npmjs.org/\">https://registry.npmjs.org/</a></p>\n<p>查看当前的镜像源：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm config get registry</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>淘宝</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> registry https://registry.npmmirror.com</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>阿里云</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> registry https://npm.aliyun.com</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>腾讯云</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> registry http://mirrors.cloud.tencent.com/npm/</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>网易</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> registry https://mirrors.163.com/npm/</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>中国科学技术大学开源镜像站</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> registry http://mirrors.ustc.edu.cn/</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>清华大学开源镜像站</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> registry https://mirrors.tuna.tsinghua.edu.cn/</span><br></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>华为云</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> registry https://mirrors.huaweicloud.com/repository/npm/</span><br></pre></td></tr></table></figure>\n\n<p>腾讯，华为，阿里，淘宝的镜像站基本上比较全</p>\n","tags":["npm"]},{"title":"匿名上位机","url":"/2025/02/07/%E5%8C%BF%E5%90%8D%E4%B8%8A%E4%BD%8D%E6%9C%BA/","content":"<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief  发送 uint8 类型数据</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  data：数据</span></span><br><span class=\"line\"><span class=\"comment\"> *   @note   数据祯F1</span></span><br><span class=\"line\"><span class=\"comment\"> * @retval 无</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">anotc_send_uint8</span><span class=\"params\">(<span class=\"type\">uint8_t</span> data)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">uint8_t</span> _cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">uint8_t</span> data_to_send[<span class=\"number\">32</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    data_to_send[_cnt++] = <span class=\"number\">0xAA</span>;  <span class=\"comment\">// HEAD</span></span><br><span class=\"line\">    data_to_send[_cnt++] = <span class=\"number\">0xFF</span>;  <span class=\"comment\">// D_ADDR</span></span><br><span class=\"line\">    data_to_send[_cnt++] = <span class=\"number\">0xF1</span>;  <span class=\"comment\">// ID</span></span><br><span class=\"line\">    data_to_send[_cnt++] = <span class=\"number\">0</span>;     <span class=\"comment\">// LEN</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// DATA</span></span><br><span class=\"line\">    data_to_send[_cnt++] = data;</span><br><span class=\"line\">    <span class=\"comment\">// LEN</span></span><br><span class=\"line\">    data_to_send[<span class=\"number\">3</span>] = _cnt - <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">uint8_t</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">uint8_t</span> add = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; _cnt; i++) &#123;</span><br><span class=\"line\">        sum += data_to_send[i];</span><br><span class=\"line\">        add += sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    data_to_send[_cnt++] = sum;  <span class=\"comment\">// SC</span></span><br><span class=\"line\">    data_to_send[_cnt++] = add;  <span class=\"comment\">// AC</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// printf_buf(data_to_send, _cnt);</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"html 表格格式","url":"/2025/02/07/html%20%E8%A1%A8%E6%A0%BC/","content":"<table>\n<capital>如何在Markdown里面画这样的表格：</capital>\n<tr>\n<th>普通表头</th>\n<th align=\"right\"><i>斜体表头而且居右</th>\n<th colspan=2>表头横向合并单元格</th>\n<td width=\"80px\">限制列宽为80px超出会自动换行</td>\n</tr>\n<tr>\n<th>左边也可以有表头</th>\n<td bgcolor=#ffffcc>涂个颜色</td>\n<td><mark>高亮文本</mark>但不全高亮</td>\n<td><b>有时候加粗</b><i>有时候斜体</i></td>\n<td width=\"20px\">20px小于80px服从80px列宽命令无效</td>\n</tr>\n<tr>\n<td>表头不一定是一整行或者一整列的</td>\n<td rowspan=2>纵向合并单元格要注意<br>下一行少一个单元格<br>字太多必要时我会换行</td>\n<td rowspan=2 colspan=2>单元格也可以从两个方向合并</td>\n<td rowspan=2 width=\"10%\">百分比和像素是可以混用的具体服从哪个取决于哪个大</td>\n</tr>\n<td align=\"left\"> 简单做个居左 </td>\n</tr>\n</table>\n"},{"title":"tags","url":"/tags/index.html","content":""}]